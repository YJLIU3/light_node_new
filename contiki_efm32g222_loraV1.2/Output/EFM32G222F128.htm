<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\EFM32G222F128.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\EFM32G222F128.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Aug 29 10:52:37 2017
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
process_thread_RF_HEARTBEAT_TASK &rArr; LoRaMacSendConfirmedFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DebugMon_Handler</a><BR>
 <LI><a href="#[f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ACMP0_IRQHandler</a><BR>
 <LI><a href="#[d0]">exit_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">call_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ACMP0_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[17]">ADC0_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[2e]">AES_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[2a]">CMU_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[18]">DAC0_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[11]">DMA_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[12]">GPIO_EVEN_IRQHandler</a> from sx1276_hal.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[1a]">GPIO_ODD_IRQHandler</a> from sx1276_hal.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[2c]">LCD_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[25]">LETIMER0_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[23]">LEUART0_IRQHandler</a> from leusart.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[24]">LEUART1_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[2d]">MSC_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[3f]">McpsConfirm</a> from loramac-api-v3.o(.text) referenced from loramac-api-v3.o(.text)
 <LI><a href="#[40]">McpsIndication</a> from loramac-api-v3.o(.text) referenced from loramac-api-v3.o(.text)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[41]">MlmeConfirm</a> from loramac-api-v3.o(.text) referenced from loramac-api-v3.o(.text)
 <LI><a href="#[8]">NMI_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[39]">OnAckTimeoutTimerEvent</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[33]">OnJoinReqTimerEvent</a> from app_task.o(.text) referenced from app_task.o(.text)
 <LI><a href="#[32]">OnMacEvent</a> from app_task.o(.text) referenced from app_task.o(.text)
 <LI><a href="#[35]">OnMacStateCheckTimerEvent</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[3b]">OnRadioRxDone</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[3c]">OnRadioRxError</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[3e]">OnRadioRxTimeout</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[3a]">OnRadioTxDone</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[3d]">OnRadioTxTimeout</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[37]">OnRxWindow1TimerEvent</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[38]">OnRxWindow2TimerEvent</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[36]">OnTxDelayedTimerEvent</a> from loramac.o(.text) referenced from loramac.o(.text)
 <LI><a href="#[34]">OnTxNextPacketTimerEvent</a> from app_task.o(.text) referenced from app_task.o(.text)
 <LI><a href="#[26]">PCNT0_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[27]">PCNT1_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[28]">PCNT2_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[29]">RTC_IRQHandler</a> from clock.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[4b]">SX1276CheckRfFrequency</a> from sx1276_hal.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[44]">SX1276GetStatus</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[4c]">SX1276GetTimeOnAir</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[43]">SX1276Init</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[47]">SX1276IsChannelFree</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[169]">SX1276OnTimeoutIrq</a> from sx1276.o(.text) referenced 3 times from sx1276.o(.text)
 <LI><a href="#[48]">SX1276Random</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[54]">SX1276Read</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[56]">SX1276ReadBuffer</a> from sx1276_hal.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[52]">SX1276ReadRssi</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[4d]">SX1276Send</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[46]">SX1276SetChannel</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[57]">SX1276SetMaxPayloadLength</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[45]">SX1276SetModem</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[50]">SX1276SetRx</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[49]">SX1276SetRxConfig</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[4e]">SX1276SetSleep</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[4f]">SX1276SetStby</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[4a]">SX1276SetTxConfig</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[51]">SX1276StartCad</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[53]">SX1276Write</a> from sx1276.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[55]">SX1276WriteBuffer</a> from sx1276_hal.o(.text) referenced from sx1276_hal.o(.constdata)
 <LI><a href="#[10]">SysTick_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_efm32g.o(.text) referenced from startup_efm32g.o(.text)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from rtimer-arch.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[21]">UART0_RX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[22]">UART0_TX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[14]">USART0_RX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[15]">USART0_TX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[1d]">USART1_RX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[1e]">USART1_TX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[1f]">USART2_RX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[20]">USART2_TX_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[2b]">VCMP_IRQHandler</a> from startup_efm32g.o(.text) referenced from startup_efm32g.o(RESET)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_efm32g.o(.text)
 <LI><a href="#[42]">fputc</a> from leusart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[2f]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5]">process_thread_Board_Init_Task</a> from app_task.o(.text) referenced 2 times from app_task.o(.data)
 <LI><a href="#[4]">process_thread_RF_HEARTBEAT_TASK</a> from app_task.o(.text) referenced 2 times from app_task.o(.data)
 <LI><a href="#[3]">process_thread_RF_JOIN_TASK</a> from app_task.o(.text) referenced 2 times from app_task.o(.data)
 <LI><a href="#[6]">process_thread_WDOG_Feed_Task</a> from app_task.o(.text) referenced 2 times from app_task.o(.data)
 <LI><a href="#[2]">process_thread_app_led</a> from app_task.o(.text) referenced 2 times from app_task.o(.data)
 <LI><a href="#[1]">process_thread_ctimer_process</a> from ctimer.o(.text) referenced 2 times from ctimer.o(.data)
 <LI><a href="#[0]">process_thread_etimer_process</a> from etimer.o(.text) referenced 2 times from etimer.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(.text)
</UL>
<P><STRONG><a name="[193]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[58]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[194]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[195]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[196]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[197]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[198]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5b]"></a>SystemHFClockGet</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, system_efm32g.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
</UL>

<P><STRONG><a name="[5a]"></a>SystemCoreClockGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, system_efm32g.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockSet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM3
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
</UL>

<P><STRONG><a name="[199]"></a>SystemHFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32g.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>SystemHFXOClockSet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, system_efm32g.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>SystemLFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32g.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
</UL>

<P><STRONG><a name="[19a]"></a>SystemULFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32g.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>SystemLFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32g.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
</UL>

<P><STRONG><a name="[5d]"></a>SystemLFXOClockSet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, system_efm32g.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LETIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LEUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PCNT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PCNT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PCNT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART2_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>VCMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main &rArr; autostart_start &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leusart_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[63]"></a>Systick_Delay_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sysdelay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Systick_Delay_Init &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>Systick_Delay_Cycle</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sysdelay.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>Systick_Delay_uS</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sysdelay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[72]"></a>Systick_Delay_mS</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sysdelay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_1S
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[71]"></a>Systick_Delay_1S</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sysdelay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_mS
</UL>

<P><STRONG><a name="[19c]"></a>delay_10ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysdelay.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>led_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_Init &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>Rcc_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Rcc_Init &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>Rtc_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Rtc_Init &rArr; CMU_ClockDivSet &rArr; CMU_FlashWaitStateMax &rArr; CMU_FlashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Enable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CompareSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[e9]"></a>TIMER_Reset_Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
</UL>

<P><STRONG><a name="[7c]"></a>Pwm_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitCC
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TopSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CompareBufSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>

<P><STRONG><a name="[82]"></a>TIMER1_Conging</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TopSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>

<P><STRONG><a name="[83]"></a>InitLeuart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, leusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitLeuart &rArr; LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leusart_Init
</UL>

<P><STRONG><a name="[61]"></a>Leusart_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, leusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Leusart_Init &rArr; InitLeuart &rArr; LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLeuart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Leusart_Txdata</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, leusart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
</UL>

<P><STRONG><a name="[23]"></a>LEUART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, leusart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, leusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[88]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, leusart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Rx
</UL>

<P><STRONG><a name="[64]"></a>SPI0_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, spi0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI0_Init &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>SpiInOut</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>

<P><STRONG><a name="[8a]"></a>DHT_IOInput</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT_IOInput &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[8b]"></a>DHT_IOPushPull</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT_IOPushPull &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[6e]"></a>DHT11_Read_Data</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DHT11_Read_Data &rArr; DHT11_Rst &rArr; DHT_IOPushPull &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_uS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT_IOPushPull
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInGet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFrame
</UL>

<P><STRONG><a name="[94]"></a>TxDHTFrame</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dht11.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5f]"></a>SYSTEM_ChipRevisionGet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, em_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_Init
</UL>

<P><STRONG><a name="[19d]"></a>SYSTEM_GetCalibrationValue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, em_system.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>CMU_ClockSelectGet</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMU_ClockSelectGet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
</UL>

<P><STRONG><a name="[19e]"></a>CMU_Calibrate</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>CMU_ClockDivGet</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Log2ToDiv
</UL>

<P><STRONG><a name="[77]"></a>CMU_ClockDivSet</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMU_ClockDivSet &rArr; CMU_FlashWaitStateMax &rArr; CMU_FlashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Sync
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DivToLog2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
</UL>

<P><STRONG><a name="[78]"></a>CMU_ClockEnable</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Sync
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Conging
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leusart_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[a2]"></a>CMU_ClockFreqGet</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_AUXClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
</UL>

<P><STRONG><a name="[76]"></a>CMU_OscillatorEnable</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_UpdateOscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
</UL>

<P><STRONG><a name="[75]"></a>CMU_ClockSelectSet</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CMU_ClockSelectSet &rArr; CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_UpdateOscConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
</UL>

<P><STRONG><a name="[19f]"></a>CMU_FreezeEnable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>CMU_HFRCOBandGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>CMU_HFRCOBandSet</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMU_HFRCOBandSet &rArr; CMU_FlashWaitStateMax &rArr; CMU_FlashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
</UL>

<P><STRONG><a name="[1a1]"></a>CMU_HFRCOStartupDelayGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>CMU_HFRCOStartupDelaySet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>CMU_LCDClkFDIVGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>CMU_LCDClkFDIVSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>CMU_OscillatorTuningGet</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>CMU_OscillatorTuningSet</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>CMU_PCNTClockExternalGet</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>CMU_PCNTClockExternalSet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>

<P><STRONG><a name="[1a8]"></a>GPIO_DbgLocationSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>GPIO_DriveModeSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, em_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>GPIO_IntConfig</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, em_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_IntConfig &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[73]"></a>GPIO_PinModeSet</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, em_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLeuart
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT_IOPushPull
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT_IOInput
</UL>

<P><STRONG><a name="[70]"></a>EMU_EnterEM2</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, em_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EMU_EnterEM2 &rArr; EMU_Restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrataFixEmuE107En
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>EMU_EnterEM3</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, em_emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrataFixEmuE107En
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Restore
</UL>

<P><STRONG><a name="[1aa]"></a>EMU_EnterEM4</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, em_emu.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>EMU_MemPwrDown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, em_emu.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>EMU_UpdateOscConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, em_emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[1ac]"></a>EMU_EM23Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_emu.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>RTC_CompareGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, em_rtc.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>RTC_CompareSet</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, em_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_CompareSet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[7b]"></a>RTC_Enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, em_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CounterReset
</UL>

<P><STRONG><a name="[1ae]"></a>RTC_FreezeEnable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_rtc.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>RTC_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, em_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Sync
</UL>

<P><STRONG><a name="[ac]"></a>RTC_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, em_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Sync
</UL>

<P><STRONG><a name="[ad]"></a>RTC_CounterReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, em_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_CounterReset &rArr; RTC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>TIMER_Init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, em_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Conging
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[7d]"></a>TIMER_InitCC</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, em_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[ae]"></a>TIMER_InitDTI</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, em_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableDTI
</UL>

<P><STRONG><a name="[1af]"></a>TIMER_Reset</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, em_timer.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>LEUART_BaudrateCalc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
</UL>

<P><STRONG><a name="[b0]"></a>LEUART_BaudrateGet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateCalc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[b2]"></a>LEUART_BaudrateSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[b4]"></a>LEUART_Enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>

<P><STRONG><a name="[b5]"></a>LEUART_FreezeEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, em_leuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[85]"></a>LEUART_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_FreezeEnable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLeuart
</UL>

<P><STRONG><a name="[84]"></a>LEUART_Reset</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LEUART_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_FreezeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLeuart
</UL>

<P><STRONG><a name="[89]"></a>LEUART_Rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[1b0]"></a>LEUART_RxExt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_leuart.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>LEUART_Tx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leusart_Txdata
</UL>

<P><STRONG><a name="[b6]"></a>LEUART_TxExt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>

<P><STRONG><a name="[b7]"></a>LEUART_TxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>

<P><STRONG><a name="[b8]"></a>LEUART_RxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>

<P><STRONG><a name="[b9]"></a>WDOG_Enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, em_wdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>

<P><STRONG><a name="[ff]"></a>WDOG_Feed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, em_wdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_WDOG_Feed_Task
</UL>

<P><STRONG><a name="[bb]"></a>WDOG_Lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, em_wdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>

<P><STRONG><a name="[bc]"></a>WDOG_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, em_wdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Lock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>

<P><STRONG><a name="[29]"></a>RTC_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_IRQHandler &rArr; RTC_CounterReset &rArr; RTC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_next_expiration_time
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CounterReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>clock_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = clock_init &rArr; Rtc_Init &rArr; CMU_ClockDivSet &rArr; CMU_FlashWaitStateMax &rArr; CMU_FlashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>clock_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remaining
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[1b1]"></a>clock_seconds</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>autostart_start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, autostart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = autostart_start &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>autostart_exit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, autostart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_exit
</UL>

<P><STRONG><a name="[bf]"></a>etimer_request_poll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etimer_request_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>etimer_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_WDOG_Feed_Task
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_RF_HEARTBEAT_TASK
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_led
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
</UL>

<P><STRONG><a name="[ca]"></a>etimer_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
</UL>

<P><STRONG><a name="[cc]"></a>etimer_restart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = etimer_restart &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
</UL>

<P><STRONG><a name="[ce]"></a>etimer_adjust</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>

<P><STRONG><a name="[e4]"></a>etimer_expired</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_WDOG_Feed_Task
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_RF_HEARTBEAT_TASK
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_led
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_expired
</UL>

<P><STRONG><a name="[1b2]"></a>etimer_expiration_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, etimer.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>etimer_start_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etimer.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>etimer_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_next_expiration_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>etimer_next_expiration_time</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = etimer_next_expiration_time
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>etimer_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
</UL>

<P><STRONG><a name="[1b4]"></a>process_alloc_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, process.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>process_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>

<P><STRONG><a name="[d3]"></a>process_post_synch</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>

<P><STRONG><a name="[6c]"></a>process_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_start
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
</UL>

<P><STRONG><a name="[c1]"></a>process_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_exit
</UL>

<P><STRONG><a name="[6b]"></a>process_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>process_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_run &rArr; do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>process_nevents</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>process_post</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RF_Heartbeat_Post
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post_RF_JOIN_REQ
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[c4]"></a>process_poll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
</UL>

<P><STRONG><a name="[c9]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>

<P><STRONG><a name="[cb]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
</UL>

<P><STRONG><a name="[cd]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>

<P><STRONG><a name="[c5]"></a>timer_expired</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[d6]"></a>timer_remaining</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>

<P><STRONG><a name="[69]"></a>rtimer_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rtimer_init &rArr; rtimer_arch_init &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>rtimer_set</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, rtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
</UL>

<P><STRONG><a name="[da]"></a>rtimer_run_next</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtimer_run_next &rArr; rtimer_arch_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>ctimer_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ctimer_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>ctimer_set</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ctimer_set &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[e0]"></a>ctimer_reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ctimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
</UL>

<P><STRONG><a name="[e1]"></a>ctimer_restart</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctimer_restart &rArr; etimer_restart &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[e2]"></a>ctimer_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>

<P><STRONG><a name="[e3]"></a>ctimer_expired</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ctimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
</UL>

<P><STRONG><a name="[e5]"></a>rtimer_arch_disable_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtimer_arch_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; rtimer_run_next &rArr; rtimer_arch_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Reset_Counter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_disable_irq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TopSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_run_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>rtimer_arch_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rtimer_arch_init &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TopSet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[eb]"></a>rtimer_arch_enable_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtimer-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
</UL>

<P><STRONG><a name="[1b6]"></a>rtimer_arch_now</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtimer-arch.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>rtimer_arch_schedule</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtimer_arch_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Reset_Counter
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_enable_irq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TopSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_run_next
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_set
</UL>

<P><STRONG><a name="[dd]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
</UL>

<P><STRONG><a name="[db]"></a>list_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_expired
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
</UL>

<P><STRONG><a name="[1b7]"></a>list_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>list_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[dc]"></a>list_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
</UL>

<P><STRONG><a name="[df]"></a>list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>

<P><STRONG><a name="[ed]"></a>list_push</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>

<P><STRONG><a name="[1b8]"></a>list_chop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>list_pop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>list_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>list_insert</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
</UL>

<P><STRONG><a name="[1bb]"></a>list_item_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>OS_Post_RF_JOIN_REQ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post_RF_JOIN_REQ &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacEvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinReqTimerEvent
</UL>

<P><STRONG><a name="[f7]"></a>OS_RF_Heartbeat_Post</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RF_Heartbeat_Post &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacEvent
</UL>

<P><STRONG><a name="[108]"></a>LoRaMacChannelAdd</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacChannelAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetChannel
</UL>

<P><STRONG><a name="[10a]"></a>LoRaMacChannelRemove</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoRaMacChannelRemove &rArr; DisableChannelInMask
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableChannelInMask
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[116]"></a>SendFrameOnChannel</STRONG> (Thumb, 450 bytes, Stack size 80 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SendFrameOnChannel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
</UL>

<P><STRONG><a name="[120]"></a>PrepareFrame</STRONG> (Thumb, 1134 bytes, Stack size 72 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdrNextDr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[126]"></a>Send</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[128]"></a>LoRaMacInitialization</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacInitialization &rArr; ResetMacParameters &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPublicNetwork
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInit
</UL>

<P><STRONG><a name="[12b]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, loramac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdrNextDr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
</UL>

<P><STRONG><a name="[135]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, loramac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrame
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendConfirmedFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacGetDownLinkCounter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacGetUpLinkCounter
</UL>

<P><STRONG><a name="[12c]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 650 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPublicNetwork
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValueInRange
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetPublicNetwork
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetAdrOn
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetChannelsTxPower
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetChannelsDatarate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetJoinAcceptDelay2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetJoinAcceptDelay1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetReceiveDelay2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetReceiveDelay1
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetMaxRxWindow
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetChannelsNbRep
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetChannelsMask
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetRx2Channel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetDeviceClass
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitNwkIds
</UL>

<P><STRONG><a name="[132]"></a>LoRaMacMulticastChannelLink</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, loramac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMulticastChannelAdd
</UL>

<P><STRONG><a name="[134]"></a>LoRaMacMulticastChannelUnlink</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, loramac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMulticastChannelRemove
</UL>

<P><STRONG><a name="[12d]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LoRaMacMlmeRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlternateDatarate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacLinkCheckReq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinReq
</UL>

<P><STRONG><a name="[12f]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValueInRange
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrame
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendConfirmedFrame
</UL>

<P><STRONG><a name="[1bc]"></a>LoRaMacTestRxWindowsOn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>LoRaMacTestSetMic</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, loramac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetMicTest
</UL>

<P><STRONG><a name="[13c]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetDutyCycleOn
</UL>

<P><STRONG><a name="[fa]"></a>LoRaMacInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacInit &rArr; LoRaMacInitialization &rArr; ResetMacParameters &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
</UL>

<P><STRONG><a name="[f0]"></a>LoRaMacSetAdrOn</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LoRaMacSetAdrOn &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRxFrame
</UL>

<P><STRONG><a name="[130]"></a>LoRaMacInitNwkIds</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[131]"></a>LoRaMacMulticastChannelAdd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMulticastChannelLink
</UL>

<P><STRONG><a name="[133]"></a>LoRaMacMulticastChannelRemove</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMulticastChannelUnlink
</UL>

<P><STRONG><a name="[f9]"></a>LoRaMacJoinReq</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LoRaMacJoinReq &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_RF_JOIN_TASK
</UL>

<P><STRONG><a name="[f1]"></a>LoRaMacLinkCheckReq</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LoRaMacLinkCheckReq &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRxFrame
</UL>

<P><STRONG><a name="[f3]"></a>LoRaMacSendFrame</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[f4]"></a>LoRaMacSendConfirmedFrame</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LoRaMacSendConfirmedFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_RF_HEARTBEAT_TASK
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[136]"></a>LoRaMacSend</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[137]"></a>LoRaMacPrepareFrame</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendOnChannel
</UL>

<P><STRONG><a name="[138]"></a>LoRaMacSendFrameOnChannel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendOnChannel
</UL>

<P><STRONG><a name="[139]"></a>LoRaMacSendOnChannel</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
</UL>

<P><STRONG><a name="[13a]"></a>LoRaMacSetDeviceClass</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[fe]"></a>LoRaMacSetPublicNetwork</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LoRaMacSetPublicNetwork &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
</UL>

<P><STRONG><a name="[13b]"></a>LoRaMacSetDutyCycleOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>

<P><STRONG><a name="[13d]"></a>LoRaMacSetChannel</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacChannelAdd
</UL>

<P><STRONG><a name="[13e]"></a>LoRaMacSetRx2Channel</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[13f]"></a>LoRaMacSetChannelsMask</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[140]"></a>LoRaMacSetChannelsNbRep</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[141]"></a>LoRaMacSetMaxRxWindow</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[142]"></a>LoRaMacSetReceiveDelay1</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[143]"></a>LoRaMacSetReceiveDelay2</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[144]"></a>LoRaMacSetJoinAcceptDelay1</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[145]"></a>LoRaMacSetJoinAcceptDelay2</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[146]"></a>LoRaMacSetChannelsDatarate</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[147]"></a>LoRaMacSetChannelsTxPower</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[148]"></a>LoRaMacGetUpLinkCounter</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[149]"></a>LoRaMacGetDownLinkCounter</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[14a]"></a>LoRaMacSetMicTest</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac-api-v3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetMic
</UL>

<P><STRONG><a name="[1bd]"></a>LoRaMacSateGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac-api-v3.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>LoRaMacComputeMic</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, loramaccrypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[125]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, loramaccrypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[114]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, loramaccrypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[111]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loramaccrypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[110]"></a>LoRaMacJoinDecrypt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, loramaccrypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LoRaMacJoinDecrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[112]"></a>LoRaMacJoinComputeSKeys</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, loramaccrypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LoRaMacJoinComputeSKeys &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[15c]"></a>DelayMs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[fc]"></a>TimerInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[fd]"></a>TimerSetValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[105]"></a>TimerStart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerStart &rArr; ctimer_set &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[f6]"></a>TimerStop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimerStop &rArr; ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinReqTimerEvent
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[152]"></a>RtcGetTimerValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[104]"></a>TimerGetCurrentTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerGetCurrentTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[11c]"></a>TimerGetElapsedTime</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerGetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetransmissionDutyCylce
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextChannel
</UL>

<P><STRONG><a name="[65]"></a>SX1276IoInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276IoInit &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SX1276IoIrqInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276IoIrqInit &rArr; GPIO_IntConfig &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>SX1276IoIrqEnable</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276IoIrqEnable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[16b]"></a>SX1276GetPaSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[159]"></a>SX1276AntSwDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[158]"></a>SX1276AntSwInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[157]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SX1276SetAntSwLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[166]"></a>SX1276SetAntSw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[4b]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>SX1276Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276Reset &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[55]"></a>SX1276WriteBuffer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>SX1276ReadBuffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276ReadBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>GPIO_EVEN_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GPIO_EVEN_IRQHandler &rArr; SX1276OnDio0Irq &rArr; TimerStart &rArr; ctimer_set &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio5Irq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO_ODD_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GPIO_ODD_IRQHandler &rArr; SX1276OnDio2Irq &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32g.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>BoardGetUniqueId</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_Board_Init_Task
</UL>

<P><STRONG><a name="[53]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>SX1276SetOpMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[45]"></a>SX1276SetModem</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>SX1276SetChannel</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276OnTimeoutIrq &rArr; TimerStart &rArr; ctimer_set &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>SX1276Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276Init &rArr; RxChainCalibration &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>SX1276GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>SX1276SetSleep</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>SX1276ReadRssi</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>SX1276IsChannelFree</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>SX1276Random</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>SX1276SetRxConfig</STRONG> (Thumb, 760 bytes, Stack size 72 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>SX1276SetTxConfig</STRONG> (Thumb, 800 bytes, Stack size 72 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 616 bytes, Stack size 120 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276GetTimeOnAir &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>SX1276SetTx</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276SetTx &rArr; TimerStart &rArr; ctimer_set &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[171]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[4f]"></a>SX1276SetStby</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>SX1276Send</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; TimerStart &rArr; ctimer_set &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>SX1276SetRx</STRONG> (Thumb, 902 bytes, Stack size 112 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX1276SetRx &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>SX1276StartCad</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[57]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276_hal.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 874 bytes, Stack size 24 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276OnDio0Irq &rArr; TimerStart &rArr; ctimer_set &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276OnDio1Irq &rArr; TimerStop &rArr; ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276OnDio2Irq &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sx1276.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>SX1276OnDio5Irq</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, sx1276.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>aes_set_key</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[151]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[17c]"></a>aes_cbc_encrypt</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[14c]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[14d]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[14e]"></a>AES_CMAC_Update</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[14f]"></a>AES_CMAC_Final</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[17d]"></a>rand1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utilities.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[129]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[106]"></a>randr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randr
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextChannel
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[115]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilities.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[121]"></a>memcpyr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utilities.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[11a]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilities.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextChannel
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrame
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendConfirmedFrame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSend
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1bf]"></a>Nibble2HexChar</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, utilities.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1c6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1c7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[183]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[189]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1cb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ce]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[67]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextChannel
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_RF_HEARTBEAT_TASK
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_RF_JOIN_TASK
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacEvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinReqTimerEvent
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDHTFrame
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[1cf]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d0]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16d]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[16f]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[16c]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>CHIP_Init</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHIP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_ChipRevisionGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>TIMER_CompareBufSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[81]"></a>TIMER_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Conging
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[80]"></a>TIMER_TopSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Conging
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[8c]"></a>DHT11_Rst</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_Rst &rArr; DHT_IOPushPull &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_mS
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_uS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT_IOPushPull
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT_IOInput
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[8f]"></a>DHT11_Check</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[91]"></a>DHT11_Read_Bit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Delay_uS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInGet
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
</UL>

<P><STRONG><a name="[92]"></a>DHT11_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT11_Read_Byte &rArr; DHT11_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[90]"></a>GPIO_PinInGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dht11.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_PinOutSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[a1]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PCNTClockExternalSet
</UL>

<P><STRONG><a name="[96]"></a>CMU_FlashWaitStateControl</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CMU_FlashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
</UL>

<P><STRONG><a name="[95]"></a>CMU_FlashWaitStateMax</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMU_FlashWaitStateMax &rArr; CMU_FlashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[99]"></a>CMU_AUXClkGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, em_cmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
</UL>

<P><STRONG><a name="[97]"></a>CMU_DBGClkGet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_AUXClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[9a]"></a>CMU_LFClkGet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMU_LFClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[9f]"></a>CMU_DivToLog2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, em_cmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[9e]"></a>CMU_Log2ToDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivGet
</UL>

<P><STRONG><a name="[a0]"></a>CMU_Sync</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_cmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[a6]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
</UL>

<P><STRONG><a name="[a8]"></a>EMU_Restore</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, em_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMU_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM3
</UL>

<P><STRONG><a name="[a7]"></a>getErrataFixEmuE107En</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, em_emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM3
</UL>

<P><STRONG><a name="[aa]"></a>RTC_Sync</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Enable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CompareSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[af]"></a>TIMER_EnableDTI</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, em_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitDTI
</UL>

<P><STRONG><a name="[b3]"></a>LEUART_Sync</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, em_leuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDmaInEM2Enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxDmaInEM2Enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxExt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Enable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
</UL>

<P><STRONG><a name="[ba]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_wdog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Enable
</UL>

<P><STRONG><a name="[c2]"></a>update_time</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[0]"></a>process_thread_etimer_process</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_thread_etimer_process &rArr; timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> etimer.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>add_timer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>

<P><STRONG><a name="[d0]"></a>exit_process</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_is_running
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_exit
</UL>

<P><STRONG><a name="[d2]"></a>call_process</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>

<P><STRONG><a name="[d4]"></a>do_poll</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>

<P><STRONG><a name="[d5]"></a>do_event</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
</UL>

<P><STRONG><a name="[1]"></a>process_thread_ctimer_process</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = process_thread_ctimer_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctimer.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtimer-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_disable_irq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[e8]"></a>TIMER_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtimer-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[e7]"></a>TIMER_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtimer-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
</UL>

<P><STRONG><a name="[ea]"></a>TIMER_TopSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtimer-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[ef]"></a>ProcessRxFrame</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ProcessRxFrame &rArr; LoRaMacLinkCheckReq &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetAdrOn
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacLinkCheckReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacEvent
</UL>

<P><STRONG><a name="[f2]"></a>SendFrame</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrame
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendConfirmedFrame
</UL>

<P><STRONG><a name="[33]"></a>OnJoinReqTimerEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OnJoinReqTimerEvent &rArr; TimerStop &rArr; ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post_RF_JOIN_REQ
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>OnTxNextPacketTimerEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OnTxNextPacketTimerEvent &rArr; TimerStop &rArr; ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>OnMacEvent</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = OnMacEvent &rArr; ProcessRxFrame &rArr; LoRaMacLinkCheckReq &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RF_Heartbeat_Post
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post_RF_JOIN_REQ
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRxFrame
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>TxFrame</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TxFrame &rArr; DHT11_Read_Data &rArr; DHT11_Rst &rArr; DHT_IOPushPull &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_RF_HEARTBEAT_TASK
</UL>

<P><STRONG><a name="[2]"></a>process_thread_app_led</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_thread_app_led &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>process_thread_RF_JOIN_TASK</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = process_thread_RF_JOIN_TASK &rArr; LoRaMacJoinReq &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinReq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>process_thread_RF_HEARTBEAT_TASK</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = process_thread_RF_HEARTBEAT_TASK &rArr; LoRaMacSendConfirmedFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendConfirmedFrame
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFrame
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>process_thread_Board_Init_Task</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = process_thread_Board_Init_Task &rArr; LoRaMacSetPublicNetwork &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetPublicNetwork
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetAdrOn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetUniqueId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post_RF_JOIN_REQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>process_thread_WDOG_Feed_Task</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_thread_WDOG_Feed_Task &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>RxWindowSetup</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>

<P><STRONG><a name="[38]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>OnRadioTxDone</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OnRadioTxDone &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PrepareRxDoneAbort &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[10d]"></a>AddMacCommand</STRONG> (Thumb, 582 bytes, Stack size 20 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddMacCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[109]"></a>ValueInRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacChannelAdd
</UL>

<P><STRONG><a name="[10b]"></a>DisableChannelInMask</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableChannelInMask
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacChannelRemove
</UL>

<P><STRONG><a name="[10e]"></a>Rx2FreqInRange</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rx2FreqInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[10c]"></a>ProcessMacCommands</STRONG> (Thumb, 1044 bytes, Stack size 72 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ProcessMacCommands &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx2FreqInRange
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValueInRange
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacChannelRemove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[3b]"></a>OnRadioRxDone</STRONG> (Thumb, 2168 bytes, Stack size 120 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = OnRadioRxDone &rArr; PrepareRxDoneAbort &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacChannelAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>OnRadioTxTimeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OnRadioTxTimeout &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>OnRadioRxError</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OnRadioRxError &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>OnRadioRxTimeout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OnRadioRxTimeout &rArr; OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>LimitTxPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[11b]"></a>CountBits</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountBits
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextChannel
</UL>

<P><STRONG><a name="[119]"></a>SetNextChannel</STRONG> (Thumb, 686 bytes, Stack size 40 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetNextChannel &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountBits
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[11d]"></a>RetransmissionDutyCylce</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RetransmissionDutyCylce &rArr; TimerGetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[11e]"></a>CalculateBackOff</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CalculateBackOff &rArr; RetransmissionDutyCylce &rArr; TimerGetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetransmissionDutyCylce
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[11f]"></a>ScheduleTx</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ScheduleTx &rArr; SendFrameOnChannel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextChannel
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[35]"></a>OnMacStateCheckTimerEvent</STRONG> (Thumb, 1100 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OnMacStateCheckTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>ParseMacCommandsToRepeat</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParseMacCommandsToRepeat
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[123]"></a>ValidatePayloadLength</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ValidatePayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[122]"></a>AdrNextDr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AdrNextDr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[36]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OnTxDelayedTimerEvent &rArr; PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RxWindowSetup &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>SetPublicNetwork</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetPublicNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[12e]"></a>AlternateDatarate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[127]"></a>ResetMacParameters</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, loramac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ResetMacParameters &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[3f]"></a>McpsConfirm</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = McpsConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac-api-v3.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>McpsIndication</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = McpsIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac-api-v3.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>MlmeConfirm</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, loramac-api-v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MlmeConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac-api-v3.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqEnable
</UL>

<P><STRONG><a name="[156]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqEnable
</UL>

<P><STRONG><a name="[153]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[15f]"></a>GPIO_PinInGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sx1276_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>GPIO_PinOutClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[15d]"></a>GPIO_PinOutSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[168]"></a>RxChainCalibration</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RxChainCalibration &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[16a]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sx1276.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[178]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[179]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[176]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[17a]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[175]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[17b]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[177]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[18e]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[190]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
